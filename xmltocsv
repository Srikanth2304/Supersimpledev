

@Service
@Transactional
public class CustomerServices {
 
    @Autowired
    private CustomerRepository customerRepo;
     
 
    public void updateResetPasswordToken(String token, String email) throws CustomerNotFoundException {
        Customer customer = customerRepo.findByEmail(email);
        if (customer != null) {
            customer.setResetPasswordToken(token);
            customerRepo.save(customer);
        } else {
            throw new CustomerNotFoundException("Could not find any customer with the email " + email);
        }
    }
     
    public Customer getByResetPasswordToken(String token) {
        return customerRepo.findByResetPasswordToken(token);
    }
     
    public void updatePassword(Customer customer, String newPassword) {
        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
        String encodedPassword = passwordEncoder.encode(newPassword);
        customer.setPassword(encodedPassword);
         
        customer.setResetPasswordToken(null);
        customerRepo.save(customer);
    }
}

<a th:href="/@{/forgot_password}">Forgot your password?</a>


<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-mail</artifactId>
</dependency>

spring:
  mail:
    host: smtp.gmail.com
    username: codejava.net@gmail.com
    password: your_email_password
    port: 587
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true


import org.springframework.mail.javamail.JavaMailSender;
 
@Controller
public class ForgotPasswordController {
    @Autowired
    private JavaMailSender mailSender;
     
    @Autowired
    private CustomerServices customerService;
     
    @GetMapping("/forgot_password")
    public String showForgotPasswordForm() {
 
    }
 
    @PostMapping("/forgot_password")
    public String processForgotPassword() {
    }
     
    public void sendEmail(){
 
    }  
     
     
    @GetMapping("/reset_password")
    public String showResetPasswordForm() {
 
    }
     
    @PostMapping("/reset_password")
    public String processResetPassword() {
 
    }
}

@GetMapping("/forgot_password")
public String showForgotPasswordForm() {
    return "forgot_password_form";
}


<div>
    <h2>Forgot Password</h2>
</div>
     
<div th:if="${error != null}">
    <p class="text-danger">[[${error}]]</p>
</div>
<div th:if="${message != null}">
    <p class="text-warning">[[${message}]]</p>
</div>
         
<form th:action="@{/forgot_password}" method="post" style="max-width: 420px; margin: 0 auto;">
<div class="border border-secondary rounded p-3">
    <div>
        <p>We will be sending a reset password link to your email.</p>
    </div>
    <div>
        <p>
            <input type="email" name="email" class="form-control" placeholder="Enter your e-mail" required autofocus/>
        </p>         
        <p class="text-center">
            <input type="submit" value="Send" class="btn btn-primary" />
        </p>
    </div>
</div>
</form>


@PostMapping("/forgot_password")
public String processForgotPassword(HttpServletRequest request, Model model) {
    String email = request.getParameter("email");
    String token = RandomString.make(30);
     
    try {
        customerService.updateResetPasswordToken(token, email);
        String resetPasswordLink = Utility.getSiteURL(request) + "/reset_password?token=" + token;
        sendEmail(email, resetPasswordLink);
        model.addAttribute("message", "We have sent a reset password link to your email. Please check.");
         
    } catch (CustomerNotFoundException ex) {
        model.addAttribute("error", ex.getMessage());
    } catch (UnsupportedEncodingException | MessagingException e) {
        model.addAttribute("error", "Error while sending email");
    }
         
    return "forgot_password_form";
}


http://contextpath/reset_password?token=random_token

public class Utility {
    public static String getSiteURL(HttpServletRequest request) {
        String siteURL = request.getRequestURL().toString();
        return siteURL.replace(request.getServletPath(), "");
    }
}


public void sendEmail(String recipientEmail, String link)
        throws MessagingException, UnsupportedEncodingException {
    MimeMessage message = mailSender.createMimeMessage();              
    MimeMessageHelper helper = new MimeMessageHelper(message);
     
    helper.setFrom("contact@shopme.com", "Shopme Support");
    helper.setTo(recipientEmail);
     
    String subject = "Here's the link to reset your password";
     
    String content = "<p>Hello,</p>"
            + "<p>You have requested to reset your password.</p>"
            + "<p>Click the link below to change your password:</p>"
            + "<p><a href=\"" + link + "\">Change my password</a></p>"
            + "<br>"
            + "<p>Ignore this email if you do remember your password, "
            + "or you have not made the request.</p>";
     
    helper.setSubject(subject);
     
    helper.setText(content, true);
     
    mailSender.send(message);
}


@GetMapping("/reset_password")
public String showResetPasswordForm(@Param(value = "token") String token, Model model) {
    Customer customer = customerService.getByResetPasswordToken(token);
    model.addAttribute("token", token);
     
    if (customer == null) {
        model.addAttribute("message", "Invalid Token");
        return "message";
    }
     
    return "reset_password_form";
}


<div>
    <h2>Reset Your Password</h2>
</div>
         
<form th:action="@{/reset_password}" method="post" style="max-width: 350px; margin: 0 auto;">
    <input type="hidden" name="token" th:value="${token}" />
<div class="border border-secondary rounded p-3">
    <div>
        <p>
            <input type="password" name="password" id="password" class="form-control"
                placeholder="Enter your new password" required autofocus />
        </p>         
        <p>
            <input type="password" class="form-control" placeholder="Confirm your new password"
                required oninput="checkPasswordMatch(this);" />
        </p>         
        <p class="text-center">
            <input type="submit" value="Change Password" class="btn btn-primary" />
        </p>
    </div>
</div>
</form>


function checkPasswordMatch(fieldConfirmPassword) {
    if (fieldConfirmPassword.value != $("#password").val()) {
        fieldConfirmPassword.setCustomValidity("Passwords do not match!");
    } else {
        fieldConfirmPassword.setCustomValidity("");
    }
}


@PostMapping("/reset_password")
public String processResetPassword(HttpServletRequest request, Model model) {
    String token = request.getParameter("token");
    String password = request.getParameter("password");
     
    Customer customer = customerService.getByResetPasswordToken(token);
    model.addAttribute("title", "Reset your password");
     
    if (customer == null) {
        model.addAttribute("message", "Invalid Token");
        return "message";
    } else {           
        customerService.updatePassword(customer, password);
         
        model.addAttribute("message", "You have successfully changed your password.");
    }
     
    return "message";
}
